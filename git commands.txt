> conda . 			# to start vs code in current folder
python --version 
where python   			# to see env paths active for python
python -m venv venv_name 	# creates virtual env venv_name in current folder
venv\Scripts\activate.bat  	# to get into venv in cmd
source venv/Scripts/activate  	# to get to it using bash
pip list # to list all packages installed
pip freeze > requirements.txt 	# to get current versions of packages installed into req.txt
pip install -r requirements.txt  # to install all
deactivate # go get out

conda create --name conda_env numpy pandas	# creates conda env with name conda_env inside env folder of ananconda in C with numpy and pandas we can also specify python version.
activate conda_env 				# to activate the environment
pip list --format=freeze > requirement.txt	# to get requirement file for conda environment, usually conda envs are save in env.yaml files
conda env export > E:\Anacond\environment.yaml	# to save .yaml file (equivalent to requirment in pip) other disk than C
type E:\Anacond\environment.yaml		# to view file in cmd
conda env create -f environment.yaml		# to create new env with same packages
conda env list					# to get list of all virtual envs present, base(defaul conda env with preinstalled conda libs) and other envs created will be shown
conda deactivate				# to deactivate
conda env remove -n conda_env			# to delete conda_env

conda env create -p E:\Anacond\conda_env -f E:\Anacond\environment.yaml  
						# -p stands for path -n stands for name -f stands for file, use this when environ.yaml diff dir, and vir env also
						#	has to be created in different env
conda remove -p E:\Anacond\conda_env --all 	# to completely delete environment including folders created.
-------------
Example bash script test.sh
$ notepad test.sh	#command to edit script in notepad
#!/bin/bash		#this can be bash or sh

name='amit'
place=$1
date=$2
user=$(whoami)		#whoami is a command the output of this command will be stored in user variable

echo "hello $name"	
sleep 1			#sleep for 1 second

echo "you entered $place"
sleep 1

echo "you entered $date"
sleep 1

echo "you are $user"
--------------
output for above 
$ bash test.sh hubli 23 	#command can be bash or sh in git bash, this does not run in cmd
hello amit
you entered hubli
you entered 23
you are DEEL
---------------------
after installing windows subsystem for linux
to use linux commands in conda prompt or cmd, we can use wsl before entering actual commands to make them work
>wsl ls  	# this inside conda or cmd will list all files
>wsl vim fil.txt# opens file in vim editor
>bash		# this command opens bash/ubuntu/linux file system inside cmd/conda, here we can directly use linux commands.
>~/.bashrc	# ~ specifies last home directory
>exit		# to exit bash/linux console

--
>cd %CONDA_PREFIX%		#this takes us to the root file of current environment

file.bat in windows is equivalent to file.sh in linux
>mv env_vars.sh env_vars.bat    # mv is used for renaming or replacing

# In windows to create environment variables that activate only when environment is activate and destroyed when env is deactivated
>cd %CONDA_PREFIX%
mkdir .\etc\conda\activate.d
mkdir .\etc\conda\deactivate.d
type NUL > .\etc\conda\activate.d\env_vars.bat
type NUL > .\etc\conda\deactivate.d\env_vars.bat

# inside activate.d's .bat file, double click to paste inside vim
set MY_KEY='secret-key-value'
set MY_FILE=C:\path\to\my\file
# to unset these environment variable use below in .bat file of deactivate.d folder
set MY_KEY=
set MY_FILE=
--

# to set env variables in linux use export to set and use unset MY_KEY command to delete value

#individually configuring env varibles in windows.
conda env config vars set my_var=value 	#to set variables directly
conda env config vars list		# to see list of env variables in an environment, the ones set in .bat/.sh will not be visible here
conda env config vars unset my_var -n test-env			# deletes env var values in test-env(vir environment)
echo %var_name%				# to print variable value in windows, the ones set in .bat/.sh will be visible here
echo $var_name				# to print var value in linux





---------------
git status
git init
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"

git remote add origin <REMOTE_URL>
# Sets the new remote
git remote -v
# Verifies the new remote URL
git pull 'link'
#to update local with remote repository


git add .
git commit -m "message"
git push origin main

rm -rf .git/ #to delete local git repo
git clone 'link'

#to generate ssh id
$ ssh-keygen -t ed25519 -C "thiszamit@gmail.com"
#dont give password

tail ~/.ssh/id_rsa.pub
#run this to get the public key stored in c drive (id_rsa can change) copy full ouput and save in ssh key.

git pull origin main --allow-unrelated-histories # to pull when there is history conflict i got when create repo pushed and deleted local repo and tried to push again.

>git log -p -2		# last 2 commits and changes made in them
>git log --name-status origin/main  	# to view last 2 commits(message and file name) in remote repo main branch
>git log -p -2 origin/main		# to view above along with changes made in file, to help analyse before pulling
>git diff main origin/main		# to see difference between current state and remote state
>git branch new_branch			# to create new branch
>git checkout new_branch		# to use the new_branch created
>git checkout -b new_branch		# to create and use new_branch together.
>git log --oneline --decorate		# to see the commits and current branch of head
>git push -u origin new_branch		# to push changes made in branch to remote
>git checkout main			# to use main
>git merge new_branch			# to merge changes
>git restore --staged filname		# to unstage a file.
>git reset --hard commit_id		# to unmerge or change to previous merge.
>git resest --merge commit_id		#
>git reset --merge Head~1		# to reset to previous state before merging in current branch
>git reflog				# to get all previous commits with mesages
>git stash				# to keep unstaged modified changes in the background( in order to merge etc)
>git stash pop				# to bring back stashed changes.
# pull the latest code before creating new branches, or update the branch to latest before making further changes.

>git commit -a -m "commit mesg"		# to commit all previously tracked, but modified files without staging(git add)
# when there is a conflict, control will enter a merge resolve state where we have to stage and commit 
# again by modifying file with conflict in current branch( the file will be modified in current branch)
# merge conflicts happend only when there is difference in a line, if we have an extra commit in main with changes in new
# cell but want to merge changes of another cell from branch it can be done, end result is: new cell in main retained and 
# old cell updated with changes..
# in a merge only new changes/ new lines get added to current branch, if current branch has merged once and made new changes
# now we cannot merge again and expect old changes: it will say already up to date.

>git branch -v 				# gives list of branches and last commits made in each
>git branch --merged			# gives a list of merged branches
>git branch --no-merged			# unmerged branch list
>git branch -d branch_name		# to delet branch, to force delete use -D instead of -d
